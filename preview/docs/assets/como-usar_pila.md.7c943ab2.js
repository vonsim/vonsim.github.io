import{_ as a,c as e,o as s,a as n}from"./app.da573a03.js";const C=JSON.parse('{"title":"Pila","description":"","frontmatter":{},"headers":[],"relativePath":"como-usar/pila.md","lastUpdated":1677728193000}'),l={name:"como-usar/pila.md"},o=n(`<h1 id="pila" tabindex="-1">Pila <a class="header-anchor" href="#pila" aria-hidden="true">#</a></h1><p>La <a href="https://es.wikipedia.org/wiki/Pila_(inform%C3%A1tica)" target="_blank" rel="noreferrer">pila</a> (<em>stack</em>) es una estructura de datos que permite almacenar y recuperar datos en memoria. Tiene la peculiaridad de que su modo de acceso es <em>Last In, First Out</em>: el último en entrar es el primero en salir. Al igual que una pila de papeles, se puede apilar papeles encima de todo o quitar papeles desde el tope — nunca desde el medio.</p><p>En el simulador, cada elemento de la pila ocupa 16 bits (dos celdas de memoria). El tope de la pila se guarda en el registro <code>SP</code> (<em>stack pointer</em>) y este se inicializa en <code>4000h</code> (la dirección de memoria más grande es <code>3FFFH</code>).</p><p>Para apilar, se utiliza la instrucción <a href="./instrucciones/transferencia-de-datos#push"><code>PUSH</code></a>. Internamente, ejecutar una instrucción <code>PUSH</code> es similar a hacer</p><div class="language-asm"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">; Este código es didáctico, no corre en VonSim</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">SUB</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">SP</span><span style="color:#A6ACCD;">, </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">         </span><span style="color:#676E95;font-style:italic;">; Disminuye el Stack Pointer en 2</span></span>
<span class="line"><span style="color:#89DDFF;">MOV</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">SP</span><span style="color:#A6ACCD;">], fuente  </span><span style="color:#676E95;font-style:italic;">; Copia los contenidos de fuente a donde apunte el SP</span></span>
<span class="line"></span></code></pre></div><p>Para desapilar, se utiliza la instrucción <a href="./instrucciones/transferencia-de-datos#pop"><code>POP</code></a>. Internamente, ejecutar una instrucción <code>POP</code> es similar a hacer</p><div class="language-asm"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">; Este código es didáctico, no corre en VonSim</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">MOV</span><span style="color:#A6ACCD;"> dest, [</span><span style="color:#89DDFF;">SP</span><span style="color:#A6ACCD;">]    </span><span style="color:#676E95;font-style:italic;">; Copia los contenidos de la celda a la que apunta SP en dest</span></span>
<span class="line"><span style="color:#89DDFF;">ADD</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">SP</span><span style="color:#A6ACCD;">, </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">         </span><span style="color:#676E95;font-style:italic;">; Incrementa el Stack Pointer en 2</span></span>
<span class="line"></span></code></pre></div>`,7),t=[o];function c(p,i,r,d,u,m){return s(),e("div",null,t)}const D=a(l,[["render",c]]);export{C as __pageData,D as default};
