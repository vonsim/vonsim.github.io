import{_ as s,c as a,o as n,a as l}from"./app.f926d26b.js";const u=JSON.parse('{"title":"Subrutinas","description":"","frontmatter":{},"headers":[],"relativePath":"como-usar/subrutinas.md","lastUpdated":1676141576000}'),e={name:"como-usar/subrutinas.md"},p=l(`<h1 id="subrutinas" tabindex="-1">Subrutinas <a class="header-anchor" href="#subrutinas" aria-hidden="true">#</a></h1><p>Las subrutinas en esencia son similares a las funciones, métodos o procedimientos de otros lenguages de programación.</p><p>En el simulador, las subrutinas no son más que una porción de código que terminan con la instrucción <a href="./instrucciones/transferencia-de-control#ret"><code>RET</code></a>. Por ejemplo:</p><div class="language-asm"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">ORG </span><span style="color:#F78C6C;">1000h</span></span>
<span class="line"><span style="color:#A6ACCD;">num </span><span style="color:#C792EA;">DB</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span></span>
<span class="line"><span style="color:#A6ACCD;">res </span><span style="color:#C792EA;">DB</span><span style="color:#A6ACCD;"> ?</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">ORG </span><span style="color:#F78C6C;">3000h</span></span>
<span class="line"><span style="color:#82AAFF;">espar</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">MOV</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">AX</span><span style="color:#A6ACCD;">, num</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;">AND</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">AX</span><span style="color:#A6ACCD;">, </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;">JZ</span><span style="color:#A6ACCD;"> par</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;">MOV</span><span style="color:#A6ACCD;"> res, </span><span style="color:#F78C6C;">00h</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;">JMP</span><span style="color:#A6ACCD;"> fin</span></span>
<span class="line"><span style="color:#82AAFF;">par</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">MOV</span><span style="color:#A6ACCD;"> res, </span><span style="color:#F78C6C;">0FFh</span></span>
<span class="line"><span style="color:#82AAFF;">fin</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">RET</span></span>
<span class="line"></span></code></pre></div><p>Para llamar a una subrutina, se utiliza la instrucción <a href="./instrucciones/transferencia-de-control#call"><code>CALL</code></a>:</p><div class="language-asm"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">ORG </span><span style="color:#F78C6C;">2000h</span></span>
<span class="line"><span style="color:#89DDFF;">CALL</span><span style="color:#A6ACCD;"> espar</span></span>
<span class="line"><span style="color:#89DDFF;">HLT</span></span>
<span class="line"><span style="color:#A6ACCD;">END</span></span>
<span class="line"></span></code></pre></div><p>Internamente, <code>CALL</code> es similar a hacer</p><div class="language-asm"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">; Este código es didáctico, no corre en VonSim</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">PUSH</span><span style="color:#A6ACCD;"> OFFSET sig   </span><span style="color:#676E95;font-style:italic;">; Apila la instrucción siguiente al CALL</span></span>
<span class="line"><span style="color:#89DDFF;">MOV</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">IP</span><span style="color:#A6ACCD;">, etiqueta  </span><span style="color:#676E95;font-style:italic;">; Asigna la dirección de la subrutina al Instruction Pointer</span></span>
<span class="line"><span style="color:#82AAFF;">sig</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> ...          </span><span style="color:#676E95;font-style:italic;">; instrucción siguiente al CALL</span></span>
<span class="line"></span></code></pre></div><p>y <code>RET</code> es similar a hacer</p><div class="language-asm"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">; Este código es didáctico, no corre en VonSim</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">; Desapila la instrucción apilada por CALL en el</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">; Instruction Pointer, es decir, el IP ahora apunta</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">; a la instrucción siguiente al CALL</span></span>
<span class="line"><span style="color:#89DDFF;">POP</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">IP</span></span>
<span class="line"></span></code></pre></div>`,10),o=[p];function t(c,r,i,C,y,A){return n(),a("div",null,o)}const d=s(e,[["render",t]]);export{u as __pageData,d as default};
